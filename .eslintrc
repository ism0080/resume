{
  "root": true,
  "parser": "@typescript-eslint/parser", // Allow ESLint to parse TypeScript
  "extends": [
    "plugin:@typescript-eslint/recommended", // Recommended rules from @typescript-eslint
    "prettier/@typescript-eslint", // Disables ESLint rules that would conflict with Prettier
    "plugin:prettier/recommended", // Links Prettier errors into ESLint errors
    "plugin:react/recommended", // Recommended rules for React (fixes: 'no-unused-vars' on JSX imports)
    "plugin:jest/recommended",
    "plugin:jsx-a11y/recommended", // Recommended rules for accessibility
    "plugin:css-modules/recommended",
    "plugin:jest-formatting/recommended" // Adds padding between test blocks
    // "plugin:react-hooks/recommended" // TODO: Add this plugin (Enforces Rules of Hooks)
  ],
  "plugins": ["react", "jest", "css-modules", "simple-import-sort", "import", "jest-formatting"],
  "parserOptions": {
    "ecmaVersion": 2018, // Parse modern ECMAScript features
    "sourceType": "module", // Allow module imports
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "rules": {
    "react/prop-types": "off",
    "react/display-name": "off",
    "react/jsx-no-bind": [
      "error",
      {
        "ignoreDOMComponents": false,
        "ignoreRefs": true,
        "allowArrowFunctions": true,
        "allowFunctions": false,
        "allowBind": true
      }
    ], // Prevents inline arrow functions (lambdas) and bindings
    "react/jsx-no-useless-fragment": "error", // Prevents unnecessary usage of fragments
    "for-direction": "warn", // Check for-loop increments counter
    "getter-return": "error", // Enforce return statements in getters
    "no-async-promise-executor": "error", // Disallow using an async function as a Promise executor
    "no-await-in-loop": "error", // Disallow `await` inside of loops
    "no-compare-neg-zero": "error", // Disallow comparing against -0
    "no-cond-assign": "error", // Disallow conditional assignment
    "no-constant-condition": "warn", // Disallow constant expressions in conditions
    "no-console": "error", // Disallow the use of console commands
    "no-control-regex": "error", // Disallow control characters in regex
    "no-debugger": "error", // Disallow the use of `debugger`
    "no-dupe-args": "error", // Disallow duplicate arguments in `function` definitions
    "no-dupe-else-if": "error", // Disallow duplicate conditions in if-else chains
    "no-dupe-keys": "error", // Disallow duplicate keys in object literals
    "no-empty": "warn", // Disallow empty function blocks
    "no-empty-character-class": "error", // Disallow empty character class in regular expressions
    "no-ex-assign": "error", // Prevents destructive reassigning of exception errors
    "no-extra-boolean-cast": "warn", // Disallows unnecessary boolean casts
    "prefer-arrow-callback": "error", // Convert function to an arrow when possible
    "max-lines-per-function": ["error", 160],
    "max-lines": ["error", 325],
    "max-len": ["error", 140], // Sets the limit on line length
    "arrow-body-style": ["error", "as-needed"], // Controls the use of braces around arrow function body
    "no-magic-numbers": ["error", { "ignore": [0, 1] }], // Ensures that special numbers are declared as constants
    "no-extra-parens": [
      "error",
      "all",
      {
        "returnAssign": true,
        "nestedBinaryExpressions": false,
        "ignoreJSX": "all", // TODO: Should be 'single-line', but conflicts with Prettier
        "enforceForArrowConditionals": true,
        "enforceForSequenceExpressions": true
      }
    ],
    "no-extra-semi": "warn", // Disallows additional semicolons
    "no-unexpected-multiline": "error", // Fixes issues caused by removing semicolons
    "@typescript-eslint/interface-name-prefix": [
      "off", // TODO: Remove this once interfaces are updated
      {
        "prefixWithI": "never"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "sort-imports": "off",
    "import/first": "error",
    "import/newline-after-import": "error",
    "padding-line-between-statements": [
      "error",
      // Requires blank lines before all return statements
      { "blankLine": "always", "prev": "*", "next": "return" },
      // Requires blank lines after every sequence of variables
      { "blankLine": "always", "prev": ["const", "let"], "next": "*" },
      { "blankLine": "any", "prev": ["const", "let"], "next": ["const", "let"] },
      // Requires blank lines between clauses in switch statements
      { "blankLine": "always", "prev": ["case", "default"], "next": "*" }
    ],
    "import/no-duplicates": "error",
    "simple-import-sort/sort": [
      "error",
      {
        "groups": [
          // Packages. `react` related packages come first.
          ["^react", "^@?\\w"],
          // Internal packages.
          ["^(@project)(/.*|$)"],
          // Side effect imports.
          ["^\\u0000"],
          // Absolute imports and other imports such as Vue-style `@/foo`.
          // Anything that does not start with a dot.
          ["^[^.]"],
          // Relative imports.
          // Anything that starts with a dot.
          ["^\\."]
        ]
      }
    ]
  },
  "noInlineConfig": false,
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": ["./*.config.js"],
      "rules": {
        "no-magic-numbers": "off"
      }
    },
    {
      "files": ["./packages/mock-data/**/*"],
      "rules": {
        "max-lines": "off",
        "max-len": "off",
        "no-magic-numbers": "off"
      }
    },
    {
      "files": ["./packages/interfaces/**/*"],
      "rules": {
        "no-magic-numbers": "off"
      }
    },
    {
      "files": ["@types/*"],
      "rules": {
        "no-magic-numbers": "off"
      }
    },
    {
      // TODO: Setup a specific eslint config for unit test files (matching the pattern below)
      "files": ["*.test.*", "*.spec.*"],
      "rules": {
        "no-unused-expressions": "warn",
        "no-magic-numbers": "off"
      }
    },
    {
      // TODO: Setup a specific eslint config for e2e test files (matching the pattern below)
      "files": ["*.e2e.*"],
      "rules": {
        "jest/expect-expect": "off" // Removes requirement for `expect` within each test
      }
    }
  ]
}
